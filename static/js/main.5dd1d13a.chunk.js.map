{"version":3,"sources":["Components/AppLoader.jsx","app/Api/api.js","app/Constants/constants.js","features/News/newsSlice.js","Components/DateItem.jsx","features/News/News.jsx","features/News/NewsList.jsx","features/Comments/CommentsSlice.js","features/Comments/CommentItem.jsx","features/Comments/CommentsList.jsx","features/News/NewsItemPage.jsx","App.js","app/store.js","index.js"],"names":["AppLoader","Loader","active","inverted","size","API_ROOT","getItem","id","a","fetch","response","json","getNewsList","ok","newsIds","Promise","all","map","getNewsComments","idsArr","newsAdapter","createEntityAdapter","sortComparer","b","time","initialState","getInitialState","loading","fetchNewsList","createAsyncThunk","newsList","filter","news","error","deleted","fetchNewsItem","newsItem","Error","newsSlice","createSlice","name","reducers","extraReducers","pending","state","fulfilled","action","upsertMany","payload","rejected","upsertOne","getSelectors","selectAll","selectById","DateItem","timestamp","date","Date","localizedDate","toLocaleDateString","localizedTime","toLocaleTimeString","style","marginLeft","News","history","useHistory","useSelector","title","by","score","List","Item","onClick","push","Content","Header","Description","className","Icon","color","NewsList","content","dispatch","useDispatch","loadingStatus","newsListContent","useEffect","updateInterval","setInterval","clearInterval","newsListElement","divided","ordered","relaxed","length","textAlign","Button","icon","commentsAdapter","fetchComments","comments","comment","commentsSlice","selectAllComments","CommentItem","parsedText","useState","setLoading","text","kids","childComments","parent","parse","classes","Comment","Group","threaded","join","then","Author","as","Metadata","Text","Transition","animation","duration","child","React","memo","CommentsList","commentsIds","parentId","pathname","useLocation","status","setStatus","window","scrollTo","request","unwrapResult","catch","message","abort","commentsList","marginTop","NewsItemPage","match","newsId","params","url","descendants","Card","centered","fluid","Meta","href","target","extra","App","Container","exact","path","component","configureStore","reducer","newsReducer","CommentsReducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.5dd1d13a.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Loader } from 'semantic-ui-react'\r\n\r\nconst AppLoader = () => (\r\n    <Loader active inverted size='large' />\r\n)\r\n\r\nexport default AppLoader","import { NEWS_COUNT } from \"../Constants/constants\";\r\n\r\nconst API_ROOT = 'https://hacker-news.firebaseio.com/v0';\r\n\r\nexport const getItem = async id => {\r\n    const response = await fetch(`${API_ROOT}/item/${id}.json`);\r\n\r\n    return await response.json();\r\n}\r\n\r\nexport const getNewsList = async () => {\r\n    const response = await fetch(`${API_ROOT}/newstories.json?orderBy=\"$key\"&limitToFirst=${NEWS_COUNT}`);\r\n\r\n    if (response.ok) {\r\n        let newsIds = await response.json();\r\n\r\n        return Promise.all(newsIds.map(async id => getItem(id)));\r\n    }\r\n}\r\n\r\nexport const getNewsComments = async idsArr => (\r\n    Promise.all(idsArr.map(async id => getItem(id)))\r\n);","export const NEWS_COUNT = 100;\r\nexport const UPDATE_TIMEOUT = 60000; // milliseconds","import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\r\nimport { getItem, getNewsList } from '../../app/Api/api';\r\n\r\nconst newsAdapter = createEntityAdapter({\r\n    sortComparer: (a, b) => b.time - a.time\r\n})\r\n\r\nconst initialState = newsAdapter.getInitialState({\r\n    loading: 'idle'\r\n});\r\n\r\nexport const fetchNewsList = createAsyncThunk(\r\n    'news/fetchNewsList',\r\n    async () => {\r\n        const newsList = await getNewsList();\r\n\r\n        return newsList.filter(news => news && !news.error && !news.deleted);\r\n    }\r\n);\r\n\r\nexport const fetchNewsItem = createAsyncThunk(\r\n    'news/fetchNewsItem',\r\n    async id => {\r\n        const newsItem = await getItem(id);\r\n\r\n        if (newsItem) {\r\n            return newsItem;\r\n        }\r\n\r\n        throw new Error();\r\n    }\r\n);\r\n\r\nconst newsSlice = createSlice({\r\n    name: 'news',\r\n    initialState,\r\n    reducers: {\r\n\r\n    },\r\n    extraReducers: {\r\n        [fetchNewsList.pending]: state => {\r\n            state.loading = 'loading';\r\n        },\r\n\r\n        [fetchNewsList.fulfilled]: (state, action) => {\r\n            state.loading = 'succeeded';\r\n\r\n            newsAdapter.upsertMany(state, action.payload);\r\n        },\r\n\r\n        [fetchNewsList.rejected]: state => {\r\n            state.loading = 'failed';\r\n        },\r\n\r\n        [fetchNewsItem.fulfilled]: newsAdapter.upsertOne\r\n    }\r\n});\r\n\r\nexport const { selectAll, selectById } = newsAdapter.getSelectors(state => state.newsList);\r\n\r\nexport default newsSlice.reducer;\r\n","import React from 'react';\r\n\r\nexport const DateItem = ({ timestamp }) => {\r\n    const date = new Date(timestamp * 1000);\r\n    const localizedDate = date.toLocaleDateString('ru');\r\n    const localizedTime = date.toLocaleTimeString('ru');\r\n\r\n\r\n    return (\r\n        <div>\r\n            <span>{localizedDate}</span>\r\n            <small style={{ marginLeft: '5px' }}>{localizedTime}</small>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Icon, List } from 'semantic-ui-react'\r\nimport { selectById } from './newsSlice';\r\nimport { DateItem } from '../../Components/DateItem';\r\n\r\nexport const News = ({ id }) => {\r\n    const history = useHistory();\r\n\r\n    const newsItem = useSelector(state => selectById(state, id));\r\n    const { title, time, by, score } = newsItem;\r\n\r\n    const openNewsDetails = () => {\r\n        history.push(`/news/${id}`);\r\n    };\r\n\r\n    return (\r\n        <List.Item onClick={openNewsDetails}>\r\n            <List.Content>\r\n                <List.Header>{title}</List.Header>\r\n                <List.Description>\r\n                    <DateItem timestamp={time} />\r\n                </List.Description>\r\n                <div className='author'>by {by}</div>\r\n                <div className='rating'>\r\n                    <Icon color='yellow' name='star' />\r\n                    <span className=\"rating-count\">{score}</span>\r\n                </div>\r\n            </List.Content>\r\n        </List.Item >\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Button, List } from 'semantic-ui-react';\r\nimport AppLoader from '../../Components/AppLoader';\r\nimport { UPDATE_TIMEOUT } from '../../app/Constants/constants';\r\nimport { News } from './News';\r\nimport { selectAll } from './newsSlice';\r\nimport { fetchNewsList } from \"./newsSlice\";\r\n\r\nconst NewsList = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const loadingStatus = useSelector(state => state.newsList.loading);\r\n    const newsList = useSelector(selectAll);\r\n\r\n    const newsListContent = newsList.map(news => (\r\n        <News key={news.id} id={news.id} />\r\n    ));\r\n\r\n    const newsUpdate = () => {\r\n        dispatch(fetchNewsList());\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (loadingStatus === 'idle') {\r\n            dispatch(fetchNewsList());\r\n        }\r\n    }, [loadingStatus, dispatch]);\r\n\r\n    useEffect(() => {\r\n        const updateInterval = setInterval(() => {\r\n            dispatch(fetchNewsList());\r\n        }, UPDATE_TIMEOUT);\r\n\r\n        return () => {\r\n            clearInterval(updateInterval);\r\n        }\r\n    }, [dispatch]);\r\n\r\n    let content;\r\n    let newsListElement =\r\n        <div>\r\n            <List\r\n                divided\r\n                inverted\r\n                ordered\r\n                relaxed='very'\r\n                content={newsListContent}\r\n            />\r\n        </div>\r\n\r\n    if (loadingStatus === 'loading') {\r\n        if (newsList.length) {\r\n            content = newsListElement;\r\n        } else {\r\n            content = <AppLoader />\r\n        }\r\n    } else if (loadingStatus === 'succeeded') {\r\n        content = newsListElement;\r\n    } else if (loadingStatus === 'failed') {\r\n        content = (\r\n            <div style={{ textAlign: 'center' }}>\r\n                Failed to load news!\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                className='refresh-news-btn'\r\n                icon='refresh'\r\n                content='Refresh'\r\n                size='large'\r\n                onClick={newsUpdate}\r\n            />\r\n            {content}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewsList;\r\n","import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\r\nimport { getNewsComments } from '../../app/Api/api';\r\n\r\nconst commentsAdapter = createEntityAdapter({\r\n    sortComparer: (a, b) => b.time - a.time\r\n});\r\n\r\nconst initialState = commentsAdapter.getInitialState();\r\n\r\nexport const fetchComments = createAsyncThunk(\r\n    'comments/fetchComments',\r\n    async idsArr => {\r\n        let comments = await getNewsComments(idsArr);\r\n\r\n        return comments.filter(comment => comment && !comment.error && !comment.deleted);\r\n    }\r\n);\r\n\r\nconst commentsSlice = createSlice({\r\n    name: 'comments',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: {\r\n        [fetchComments.fulfilled]: (state, action) => {\r\n            commentsAdapter.upsertMany(state, action.payload);\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    selectAll: selectAllComments,\r\n    selectById: selectCommentById\r\n} = commentsAdapter.getSelectors(state => state.comments);\r\n\r\nexport default commentsSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport parse from 'html-react-parser';\r\nimport { Comment, Transition } from 'semantic-ui-react';\r\nimport { DateItem } from '../../Components/DateItem';\r\nimport { fetchComments, selectAllComments } from './CommentsSlice';\r\nimport AppLoader from '../../Components/AppLoader';\r\n\r\nconst CommentItem = ({ comment }) => {\r\n    const dispatch = useDispatch();\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const { id, by, time, text, kids = [] } = comment;\r\n\r\n    let comments = useSelector(selectAllComments);\r\n    let childComments = comments.filter(comment => +comment.parent === +id);\r\n\r\n    let parsedText;\r\n\r\n    if (text) {\r\n        parsedText = parse(text);\r\n    }\r\n\r\n    let classes = [];\r\n\r\n    if (kids.length) {\r\n        classes.push('is-parent-comment');\r\n    }\r\n\r\n    const commentClick = () => {\r\n        if (kids.length) {\r\n            setLoading(true);\r\n\r\n            const request = dispatch(fetchComments(kids));\r\n\r\n            request.then(() => {\r\n                setLoading(false);\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Comment.Group threaded size='large'>\r\n            <Comment>\r\n                <Comment.Content className={classes.join(' ')} onClick={commentClick}>\r\n                    <Comment.Author as='span'>\r\n                        {by}\r\n                    </Comment.Author>\r\n                    <Comment.Metadata>\r\n                        <DateItem timestamp={time} />\r\n                    </Comment.Metadata>\r\n                    <Comment.Text>\r\n                        {parsedText}\r\n                    </Comment.Text>\r\n                </Comment.Content>\r\n                {\r\n                    loading && <AppLoader />\r\n                }\r\n                <Transition.Group animation='slide down' duration={300}>\r\n                    {\r\n                        childComments.map(child => (\r\n                            <div key={child.id}>\r\n                                <CommentItem comment={child} />\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </Transition.Group>\r\n            </Comment>\r\n        </Comment.Group>\r\n    );\r\n};\r\n\r\nexport default React.memo(CommentItem);\r\n","import { unwrapResult } from '@reduxjs/toolkit';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Transition } from 'semantic-ui-react';\r\nimport AppLoader from '../../Components/AppLoader';\r\nimport CommentItem from './CommentItem';\r\nimport { fetchComments, selectAllComments } from './CommentsSlice';\r\n\r\nconst CommentsList = ({ commentsIds, parentId }) => {\r\n    const dispatch = useDispatch();\r\n    const { pathname } = useLocation();\r\n\r\n    const [status, setStatus] = useState('loading');\r\n\r\n    let comments = useSelector(selectAllComments);\r\n\r\n    comments = comments.filter(comment => +comment.parent === +parentId);\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    useEffect(() => {\r\n        let request;\r\n        let fulfilled = false;\r\n\r\n        if (status === 'loading') {\r\n            request = dispatch(fetchComments(commentsIds));\r\n\r\n            request\r\n                .then(unwrapResult)\r\n                .then(() => {\r\n                    fulfilled = true;\r\n                    setStatus('loaded');\r\n                })\r\n                .catch(error => {\r\n                    if (error.message && error.message !== 'Aborted') {\r\n                        setStatus('failed');\r\n                    }\r\n                });\r\n        }\r\n\r\n        return () => {\r\n            if (status === 'loading' && !fulfilled) {\r\n                request.abort();\r\n            }\r\n        }\r\n    }, [status, dispatch, commentsIds]);\r\n\r\n    let commentsList = (\r\n        <div style={comments.length ? { marginTop: '20px' } : null}>\r\n            {\r\n                comments.map(comment => (\r\n                    <CommentItem key={comment.id} comment={comment} />\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            { status === 'loading' && <AppLoader />}\r\n            {\r\n                status === 'failed' && (\r\n                    <div style={{ marginTop: '10px' }}>\r\n                        Failed loading comments.\r\n                    </div>\r\n                )\r\n            }\r\n            <Transition.Group duration={500}>\r\n                {status === 'loaded' && commentsList}\r\n            </Transition.Group>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default React.memo(CommentsList);","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button, Card, Icon } from 'semantic-ui-react';\r\nimport CommentsList from '../Comments/CommentsList';\r\nimport { DateItem } from '../../Components/DateItem';\r\nimport { fetchNewsItem, selectById } from './newsSlice';\r\nimport { UPDATE_TIMEOUT } from '../../app/Constants/constants';\r\n\r\nconst NewsItemPage = ({ match }) => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const newsId = match.params.id;\r\n    const newsItem = useSelector(state => selectById(state, newsId));\r\n\r\n    const itemUpdate = () => {\r\n        dispatch(fetchNewsItem(newsId));\r\n    };\r\n\r\n    useEffect(() => {\r\n        const updateInterval = setInterval(() => {\r\n            dispatch(fetchNewsItem(newsId));\r\n        }, UPDATE_TIMEOUT);\r\n\r\n        return () => {\r\n            clearInterval(updateInterval);\r\n        }\r\n    }, [dispatch, newsId]);\r\n\r\n    if (!newsItem) {\r\n        return (\r\n            <h2 style={{ textAlign: 'center' }}>\r\n                News not found.\r\n            </h2>\r\n        )\r\n    }\r\n\r\n    const { title, url, by, time, descendants, kids = [] } = newsItem;\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                className='refresh-comments-btn'\r\n                icon='refresh'\r\n                content='Refresh Comments'\r\n                size='large'\r\n                onClick={itemUpdate}\r\n            />\r\n            <Button\r\n                className='home-btn'\r\n                icon='home'\r\n                content='News List'\r\n                size='large'\r\n                onClick={() => history.push('/')}\r\n            />\r\n            <Card centered fluid>\r\n                <Card.Content>\r\n                    <Card.Header>{title}</Card.Header>\r\n                    <Card.Meta>\r\n                        <DateItem timestamp={time} />\r\n                    </Card.Meta>\r\n                    <Card.Description>\r\n                        <div className=\"card-url-wrap\">\r\n                            <a href={url} target='blank' className=\"card-url\">{url}</a>\r\n                        </div>\r\n                        <div>By {by}</div>\r\n                    </Card.Description>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <Icon name='comments' />\r\n                    {descendants} comments\r\n                    <CommentsList commentsIds={kids} parentId={newsId} />\r\n                </Card.Content>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(NewsItemPage);","import React from 'react'\r\nimport NewsList from './features/News/NewsList'\r\nimport { Container } from 'semantic-ui-react'\r\n\r\nimport './App.scss';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport NewsItemPage from './features/News/NewsItemPage';\r\n\r\nconst App = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Container>\r\n                <Switch>\r\n                    <Route exact path='/' component={NewsList}></Route>\r\n                    <Route exact path='/news/:id' component={NewsItemPage}></Route>\r\n                </Switch>\r\n            </Container>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App;","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport newsReducer from \"../features/News/newsSlice\";\r\nimport CommentsReducer from \"../features/Comments/CommentsSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        newsList: newsReducer,\r\n        comments: CommentsReducer\r\n    }\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from \"./app/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}